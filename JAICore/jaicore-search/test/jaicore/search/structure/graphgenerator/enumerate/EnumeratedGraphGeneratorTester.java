package jaicore.search.structure.graphgenerator.enumerate;

import jaicore.search.core.interfaces.GraphGenerator;
import jaicore.search.model.travesaltree.NodeExpansionDescription;
import jaicore.search.structure.graphgenerator.SingleRootGenerator;
import jaicore.search.structure.graphgenerator.SuccessorGenerator;
import jaicore.search.testproblems.knapsack.KnapsackProblem;
import org.junit.Before;
import org.junit.Test;

import java.util.List;
import java.util.stream.Collectors;

import static org.junit.Assert.*;
import static jaicore.search.testproblems.knapsack.KnapsackProblem.*;

public class EnumeratedGraphGeneratorTester {

    ListEnumerator le;

    GraphGenerator<KnapsackProblem.KnapsackNode, String> gg;
    EnumeratedGraphGenerator<KnapsackProblem.KnapsackNode, String, ListEnumerator.EnumerationList> egg;

    SingleRootGenerator<KnapsackProblem.KnapsackNode> ggRootGenerator;
    SingleRootGenerator<EnumeratedNode<KnapsackProblem.KnapsackNode, ListEnumerator.EnumerationList>> eggRootGenerator;

    SuccessorGenerator<KnapsackProblem.KnapsackNode, String> ggSuccessorGenerator;
    SuccessorGenerator<EnumeratedNode<KnapsackProblem.KnapsackNode, ListEnumerator.EnumerationList>, String> eggSuccessorGenerator;

    @Before
    public void setUp() {
        le = new ListEnumerator();

        gg = createRandomProblem(10, 10).getGraphGenerator();
        egg = new EnumeratedGraphGenerator<>(gg, le);

        ggRootGenerator = (SingleRootGenerator<KnapsackProblem.KnapsackNode>)gg.getRootGenerator();
        eggRootGenerator = (SingleRootGenerator<EnumeratedNode<KnapsackProblem.KnapsackNode, ListEnumerator.EnumerationList>>)egg.getRootGenerator();

        ggSuccessorGenerator = gg.getSuccessorGenerator();
        eggSuccessorGenerator = egg.getSuccessorGenerator();
    }

    /**
     * Tests, if the root point generated by an EnumeratedGraphGenerator `egg` that uses the GraphGenerator `gg` and
     * the root point generated by `gg` are equal.
     */
    @Test
    public void testEnumeratedGrapgGeneratorGeneratesSameRootPointAsGraphGenerator() {
        KnapsackProblem.KnapsackNode rootGG = ggRootGenerator.getRoot();
        KnapsackProblem.KnapsackNode rootEGG = eggRootGenerator.getRoot().getPoint();

        assertEquals(rootEGG, rootGG);
    }

    /**
     * Tests, if the root index generated by an TreeEnumerator `te` equals the root index of the EnumeratedGraphGenerator,
     * that uses the TreeEnumerator `te` as input.
     */
    @Test
    public void testEnumeratedGraphGeneratorGeneratesCorrectIndexForRoot() {
        ListEnumerator.EnumerationList eggIndex = eggRootGenerator.getRoot().getIndex();
        ListEnumerator.EnumerationList leIndex = le.forRoot(1); // Zero since its used alongside SingleRootGenerator.

        assertEquals(eggIndex, leIndex);
    }

    /**
     * Tests, if the successors generated by the an EnumeratedGraphGenerator that uses an GraphGenerator `gg`, and
     * the successors of `gg` equal in its point.
     */
    @Test
    public void testEnumeratedGrapGeneratorGeneratesSameSuccessorsAsGraphGenerator() {
        try {
            KnapsackProblem.KnapsackNode ggNode = ggRootGenerator.getRoot();
            EnumeratedNode<KnapsackProblem.KnapsackNode, ListEnumerator.EnumerationList> eggNode = eggRootGenerator.getRoot();
//            for (int i = 0; i <= 3; i++) {
//                ggNode = ggSuccessorGenerator.generateSuccessors(ggNode).get(0).getTo();
//                eggNode = eggSuccessorGenerator.generateSuccessors(eggNode).get(0).getTo();
//            }
            List<NodeExpansionDescription<KnapsackProblem.KnapsackNode, String>> ggSuccessors;
            List<NodeExpansionDescription<EnumeratedNode<KnapsackProblem.KnapsackNode, ListEnumerator.EnumerationList>, String>> eggSuccessors;
            List<NodeExpansionDescription<KnapsackProblem.KnapsackNode, String>> mapEggToGG;

            ggSuccessors = ggSuccessorGenerator.generateSuccessors(ggNode);
            eggSuccessors = eggSuccessorGenerator.generateSuccessors(eggNode);
            mapEggToGG = eggSuccessors.stream()
                    .map(ned->new NodeExpansionDescription<>(
                            ned.getFrom().getPoint(),
                            ned.getTo().getPoint(),
                            ned.getAction(),
                            ned.getTypeOfToNode()
                    )).collect(Collectors.toList());
            assertEquals(ggSuccessors, mapEggToGG);
        } catch(InterruptedException e){
            // nothing.
        }
    }

}
